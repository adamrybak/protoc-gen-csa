use super::{generator_model::GeneratorModel, TypeMap};
use crate::{
    google::protobuf::{
        compiler::{code_generator_response, CodeGeneratorResponse},
        DescriptorProto, FieldDescriptorProto, FileDescriptorProto,
    },
    utility::{IndentLines, JoinNonEmpty},
};
use convert_case::{Case, Casing};
use indoc::formatdoc;
use std::path::Path;

pub struct GeneratorPartial<'a> {
    response: &'a mut CodeGeneratorResponse,
    type_map: &'a TypeMap,
    file: &'a FileDescriptorProto,
    file_name: String,
    partial_namespace: String,
    model_namespace: String,
}

impl<'a> GeneratorPartial<'a> {
    pub fn generate(response: &'a mut CodeGeneratorResponse, type_map: &'a TypeMap, file: &'a FileDescriptorProto) {
        let file_name = Self::file_name(file);
        let partial_namespace = Self::namespace(file);
        let model_namespace = GeneratorModel::namespace(file);
        let this = GeneratorPartial {
            response,
            type_map,
            file,
            file_name,
            partial_namespace,
            model_namespace,
        };
        let content = this.write_content();
        this.response.file.push(code_generator_response::File {
            name: Some(this.file_name),
            content: Some(content),
            insertion_point: None,
            generated_code_info: None,
        });
    }

    pub fn file_name(file: &FileDescriptorProto) -> String {
        Path::new(&file.name().to_case(Case::Pascal)).with_extension("Partials.cs").to_string_lossy().to_string()
    }

    pub fn namespace(file: &FileDescriptorProto) -> String {
        let csharp_namespace = file.options.as_ref().and_then(|o| Some(o.csharp_namespace().to_string()));
        if let Some(csharp_namespace) = csharp_namespace {
            csharp_namespace
        } else {
            file.package().split('.').map(|p| p.to_case(Case::Pascal)).collect::<Vec<_>>().join(".")
        }
    }

    fn write_content(&self) -> String {
        [self.write_header(), self.write_classes()].into_iter().join_non_empty("\n\n")
    }

    fn write_header(&self) -> String {
        let input_file_name = &self.file.name();
        let partial_namespace = &self.partial_namespace;
        formatdoc!(
            r#"
            //----------------------------------------------------------------------------------------------------
            // <auto-generated>
            //     Generated by the protoc-gen-csa tool.
            //     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
            //     Source: {input_file_name}
            // </auto-generated>
            //----------------------------------------------------------------------------------------------------
            #nullable enable

            namespace {partial_namespace};"#
        )
    }

    fn write_classes(&self) -> String {
        self.file.message_type.iter().map(|m| self.write_class(m)).join_non_empty("\n\n")
    }

    fn write_class(&self, message_type: &DescriptorProto) -> String {
        let model_namespace = &self.model_namespace;
        let class_name = message_type.name().to_case(Case::Pascal);
        let to_model = self.write_to_model(message_type);
        [
            formatdoc!(
                r#"
                public partial class {class_name} : CsaCommon.IModelable<{model_namespace}.{class_name}>
                {{"#
            ),
            [to_model].into_iter().join_non_empty("\n\n").indent_lines(1),
            formatdoc!(
                r#"
                }}"#,
            ),
        ]
        .into_iter()
        .join_non_empty("\n")
    }

    fn write_to_model(&self, message_type: &DescriptorProto) -> String {
        let partial_namespace = &self.partial_namespace;
        let model_namespace = &self.model_namespace;
        let class_name = message_type.name().to_case(Case::Pascal);
        let assignments = self.write_assignments(message_type);
        [
            formatdoc!(
                r#"
                public {model_namespace}.{class_name} ToModel(string? propertyPath = null)
                {{
                    var invalid = new CsaCommon.InvalidArgumentsException();
                    var model = new {model_namespace}.{class_name}();"#
            ),
            assignments.indent_lines(1),
            formatdoc!(
                r#"
                    try
                    {{
                        ((CsaCommon.IMessageable<{partial_namespace}.{class_name}>)model).Validate(propertyPath);
                    }}
                    catch (CsaCommon.InvalidArgumentsException ex)
                    {{
                        invalid.AddErrors(ex);
                    }}
                    if (invalid.HasErrors) throw invalid;
                    return model;
                }}"#
            ),
        ]
        .into_iter()
        .join_non_empty("\n")
    }

    fn write_assignments(&self, message_type: &DescriptorProto) -> String {
        message_type.field.iter().map(|f| self.write_assignment(f)).into_iter().join_non_empty("\n")
    }

    fn write_assignment(&self, field: &FieldDescriptorProto) -> String {
        let property = self.type_map.property(field);
        let property_name = property.name();
        match (property.repeated(), property.codec(), property.is_checked()) {
            (false, None, _) => formatdoc!(
                r#"
                model.{property_name} = {property_name};"#
            ),
            (false, Some(codec), false) => formatdoc!(
                r#"
                model.{property_name} = CsaCommon.{codec}.Decode({property_name});"#
            ),
            (false, Some(codec), true) => formatdoc!(
                r#"
                try
                {{
                    model.{property_name} = CsaCommon.{codec}.Decode(propertyPath, nameof({property_name}), {property_name});
                }}
                catch (CsaCommon.InvalidArgumentsException ex)
                {{
                    invalid.AddErrors(ex);
                }}"#
            ),
            (true, None, _) => formatdoc!(
                r#"
                model.{property_name}.AddRange({property_name});"#
            ),
            (true, Some(codec), false) => formatdoc!(
                r#"
                model.{property_name}.AddRange(CsaCommon.EnumerableCodec.Decode({property_name}, CsaCommon.{codec}.Decode));"#
            ),
            (true, Some(codec), true) => formatdoc!(
                r#"
                try
                {{
                    model.{property_name}.AddRange(CsaCommon.EnumerableCodec.Decode(propertyPath, nameof({property_name}), {property_name}, CsaCommon.{codec}.Decode));
                }}
                catch (CsaCommon.InvalidArgumentsException ex)
                {{
                    invalid.AddErrors(ex);
                }}"#
            ),
        }
    }
}
