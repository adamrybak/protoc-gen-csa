use super::{GeneratorPartial, TypeMap};
use crate::google::protobuf::{
    compiler::{code_generator_response, CodeGeneratorResponse},
    DescriptorProto, FileDescriptorProto,
};
use convert_case::{Case, Casing};
use indoc::formatdoc;
use std::path::Path;

pub struct GeneratorModel<'a> {
    response: &'a mut CodeGeneratorResponse,
    type_map: &'a TypeMap,
    file: &'a FileDescriptorProto,
    file_name: String,
    namespace: String,
    model_namespace: String,
}

impl<'a> GeneratorModel<'a> {
    pub fn generate(response: &'a mut CodeGeneratorResponse, type_map: &'a TypeMap, file: &'a FileDescriptorProto) {
        let file_name = Self::file_name(file);
        let namespace = GeneratorPartial::namespace(file);
        let model_namespace = Self::namespace(file);
        let this = GeneratorModel {
            response,
            type_map,
            file,
            file_name,
            namespace,
            model_namespace,
        };
        let content = this.write_content();
        this.response.file.push(code_generator_response::File {
            name: Some(this.file_name),
            content: Some(content),
            insertion_point: None,
            generated_code_info: None,
        });
    }

    pub fn file_name(file: &FileDescriptorProto) -> String {
        Path::new(&file.name().to_case(Case::Pascal)).with_extension("Models.cs").to_string_lossy().to_string()
    }

    pub fn namespace(file: &FileDescriptorProto) -> String {
        format!("{}.Models", GeneratorPartial::namespace(file))
    }

    fn write_content(&self) -> String {
        [
            self.write_header(), //
            self.write_classes(),
        ]
        .into_iter()
        .filter(|x| !x.is_empty())
        .collect::<Vec<_>>()
        .join("\n\n")
    }

    fn write_header(&self) -> String {
        let input_file_name = &self.file.name();
        let model_namespace = &self.model_namespace;
        formatdoc!(
            r#"
            //----------------------------------------------------------------------------------------------------
            // <auto-generated>
            //     Generated by the protoc-gen-csa tool.
            //     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
            //     Source: {input_file_name}
            // </auto-generated>
            //----------------------------------------------------------------------------------------------------
            
            namespace {model_namespace};"#
        )
    }

    fn write_classes(&self) -> String {
        self.file.message_type.iter().map(|m| self.write_class(m)).filter(|x| !x.is_empty()).collect::<Vec<_>>().join("\n\n")
    }

    fn write_class(&self, message_type: &DescriptorProto) -> String {
        let namespace = &self.namespace;
        let model_namespace = &self.model_namespace;
        let class_name = message_type.name().to_case(Case::Pascal);
        formatdoc!(
            r#"
            public partial class {class_name} : CsaCommon.IMessageable<{namespace}.{class_name}>
            {{
                public {namespace}.{class_name} ToMessage()
                {{
                    throw new NotImplementedException();
                }}
            }}"#
        )
    }
}
