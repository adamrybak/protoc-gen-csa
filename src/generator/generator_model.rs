use super::{property::PropertyFormat, BaseType, GeneratorPartial, TypeMap};
use crate::{
    google::protobuf::{
        compiler::{code_generator_response, CodeGeneratorResponse},
        DescriptorProto, FieldDescriptorProto, FileDescriptorProto,
    },
    utility::IndentLines,
};
use convert_case::{Case, Casing};
use indoc::formatdoc;
use std::path::Path;

pub struct GeneratorModel<'a> {
    response: &'a mut CodeGeneratorResponse,
    type_map: &'a TypeMap,
    file: &'a FileDescriptorProto,
    file_name: String,
    partial_namespace: String,
    model_namespace: String,
}

impl<'a> GeneratorModel<'a> {
    pub fn generate(response: &'a mut CodeGeneratorResponse, type_map: &'a TypeMap, file: &'a FileDescriptorProto) {
        let file_name = Self::file_name(file);
        let partial_namespace = GeneratorPartial::namespace(file);
        let model_namespace = Self::namespace(file);
        let this = GeneratorModel {
            response,
            type_map,
            file,
            file_name,
            partial_namespace,
            model_namespace,
        };
        let content = this.write_content();
        this.response.file.push(code_generator_response::File {
            name: Some(this.file_name),
            content: Some(content),
            insertion_point: None,
            generated_code_info: None,
        });
    }

    pub fn file_name(file: &FileDescriptorProto) -> String {
        Path::new(&file.name().to_case(Case::Pascal)).with_extension("Models.cs").to_string_lossy().to_string()
    }

    pub fn namespace(file: &FileDescriptorProto) -> String {
        format!("{}.Models", GeneratorPartial::namespace(file))
    }

    fn write_content(&self) -> String {
        [
            self.write_header(), //
            self.write_classes(),
        ]
        .into_iter()
        .filter(|x| !x.is_empty())
        .collect::<Vec<_>>()
        .join("\n\n")
    }

    fn write_header(&self) -> String {
        let input_file_name = &self.file.name();
        let model_namespace = &self.model_namespace;
        formatdoc!(
            r#"
            //----------------------------------------------------------------------------------------------------
            // <auto-generated>
            //     Generated by the protoc-gen-csa tool.
            //     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
            //     Source: {input_file_name}
            // </auto-generated>
            //----------------------------------------------------------------------------------------------------
            #nullable enable

            namespace {model_namespace};"#
        )
    }

    fn write_classes(&self) -> String {
        self.file.message_type.iter().map(|m| self.write_class(m)).filter(|x| !x.is_empty()).collect::<Vec<_>>().join("\n\n")
    }

    fn write_class(&self, message_type: &DescriptorProto) -> String {
        let partial_namespace = &self.partial_namespace;
        let class_name = message_type.name().to_case(Case::Pascal);
        let properties = self.write_properties(message_type);
        let methods = self.write_methods(message_type);
        let regions = [properties, methods].into_iter().filter(|x| !x.is_empty()).collect::<Vec<_>>().join("\n\n").indent_subsequent_lines(1);
        formatdoc!(
            r#"
            public partial class {class_name} : CsaCommon.IMessageable<{partial_namespace}.{class_name}>
            {{
                {regions}
            }}"#
        )
    }

    fn write_properties(&self, message_type: &DescriptorProto) -> String {
        message_type.field.iter().map(|f| self.write_property(f)).filter(|x| !x.is_empty()).collect::<Vec<_>>().join("\n")
    }

    fn write_property(&self, field: &FieldDescriptorProto) -> String {
        let property = self.type_map.property(field);
        let property_type = property.full_type_name(&self.model_namespace);
        let property_name = property.name();
        let default_value = property.default_value().map(|x| format!(" = {};", x)).unwrap_or_default();
        formatdoc!(
            r#"
            public {property_type} {property_name} {{ get; set; }}{default_value}"#
        )
    }

    fn write_methods(&self, message_type: &DescriptorProto) -> String {
        let partial_namespace = &self.partial_namespace;
        let class_name = message_type.name().to_case(Case::Pascal);
        let header = formatdoc!(
            r#"
            partial void Validate();

            public {partial_namespace}.{class_name} ToMessage()
            {{
                var msg = new {partial_namespace}.{class_name}();"#
        );
        let assignments = self.write_assignments(message_type).indent_lines(1);
        let footer = formatdoc!(
            r#"
                return msg;
            }}"#
        );
        [header, assignments, footer].into_iter().filter(|x| !x.is_empty()).collect::<Vec<_>>().join("\n")
    }

    fn write_assignments(&self, message_type: &DescriptorProto) -> String {
        message_type.field.iter().map(|f| self.write_assignment(f)).filter(|x| !x.is_empty()).collect::<Vec<_>>().join("\n")
    }

    fn write_assignment(&self, field: &FieldDescriptorProto) -> String {
        let property = self.type_map.property(field);
        let property_name = property.name();
        let encode = match (property.base_type(), &property.options().format) {
            (BaseType::Long, PropertyFormat::UnixTimeSeconds) => Some("EncodeSeconds".to_string()),
            (BaseType::Long, PropertyFormat::UnixTimeMilliseconds) => Some("EncodeMilliseconds".to_string()),
            (BaseType::String, PropertyFormat::Guid)
            | (BaseType::String, PropertyFormat::DateTime)
            | (BaseType::String, PropertyFormat::DateTimeOffset)
            | (BaseType::String, PropertyFormat::DateOnly)
            | (BaseType::String, PropertyFormat::TimeOnly)
            | (BaseType::String, PropertyFormat::TimeSpan) => Some(format!("Encode")),
            _ => None,
        };
        if !property.repeated() {
            let value = match encode {
                Some(f) => format!("CsaCommon.Encoder.{f}({property_name})"),
                _ => format!("{property_name}"),
            };
            format!("msg.{property_name} = {value};")
        } else {
            let enumerable = match encode {
                Some(f) => format!("{property_name}.Select(CsaCommon.Encoder.{f})"),
                _ => format!("{property_name}"),
            };
            format!("msg.{property_name}.AddRange({enumerable});")
        }
    }
}
